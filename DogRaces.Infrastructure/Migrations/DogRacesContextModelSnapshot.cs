// <auto-generated />
using System;
using DogRaces.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DogRaces.Infrastructure.Migrations
{
    [DbContext(typeof(DogRacesContext))]
    partial class DogRacesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DogRaces.Domain.Entities.Bet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsWinning")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Selection")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("TicketId");

                    b.ToTable("Bets", (string)null);
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ResultDeterminedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ResultPublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Races", (string)null);
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.RaceOdds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Selection")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RaceId", "Selection")
                        .IsUnique();

                    b.ToTable("RaceOdds", (string)null);
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalPayout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalStake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.Bet", b =>
                {
                    b.HasOne("DogRaces.Domain.Entities.Race", "Race")
                        .WithMany("Bets")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogRaces.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Bets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.RaceOdds", b =>
                {
                    b.HasOne("DogRaces.Domain.Entities.Race", "Race")
                        .WithMany("RaceOdds")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.Race", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("RaceOdds");
                });

            modelBuilder.Entity("DogRaces.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
