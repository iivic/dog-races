using DogRaces.Application.Data;
using DogRaces.Domain.Entities;

namespace DogRaces.Api.IntegrationTests.Infrastructure;

public class TestDataSeedService
{
    private readonly IDogRacesContext _context;

    public TestDataSeedService(IDogRacesContext context)
    {
        _context = context;
    }

    public async Task SeedTestData(CancellationToken cancellationToken)
    {
        // Seed GlobalConfiguration
        if (!_context.GlobalConfigurations.Any())
        {
            var globalConfig = new GlobalConfiguration(
                id: 1,
                minTicketStake: 1.0m,
                maxTicketWin: 10000.0m,
                minNumberOfActiveRounds: 7
            );

            _context.GlobalConfigurations.Add(globalConfig);
            await _context.SaveChangesAsync(cancellationToken);
        }

        // Note: Races will be auto-generated by the background service
        // For integration tests, we can manually create test races if needed
    }

    public async Task<Race> CreateTestRace(DateTimeOffset? startTime = null, CancellationToken cancellationToken = default)
    {
        var raceStartTime = startTime ?? DateTimeOffset.UtcNow.AddMinutes(5);
        
        var race = new Race(
            id: 0,
            startTime: raceStartTime,
            raceDurationInSeconds: 30
        );

        race.CreateRaceOdds();

        _context.Races.Add(race);
        await _context.SaveChangesAsync(cancellationToken);

        return race;
    }
}
